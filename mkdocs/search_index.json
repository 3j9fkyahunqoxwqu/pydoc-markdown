{
    "docs": [
        {
            "location": "/",
            "text": "pydocmd\n\n\n\u2013 \ninsipired by the \nKeras\n Documentation\n\n\nPydocmd uses \nMkDocs\n and extended \nMarkdown\n syntax to generate beautiful\nPython API documentation.\n\n\nTodo\n\n\n\n\n[x] Support \n+\n suffix to include documented members of a module/class\n\n\n[ ] Expand and link cross-references (eg. \n#SomeClass\n)\n\n\n[ ] Parse, format and link types listed in parameter/member/raise/return type\n      docstrings (eg. \nsomeattr (int): This is...\n)\n\n\n\n\nInstallation\n\n\npip install pydoc-markdown\npip install git+https://github.com/NiklasRosenstein/pydoc-markdown.git  # latest development version\n\n\n\nUsage\n\n\nPydocmd can generate plain Markdown files from Python modules using the\n\npydocmd simple\n command. Specify one or more module names on the command-line.\nSupports the \n+\n syntax to include members of the module (or \n++\n to include\nmembers of the members, etc.)\n\n\npydocmd simple mypackage+ mypackage.mymodule+ > docs.md\n\n\n\nAlternatively, pydocmd wraps the MkDocs command-line interface and generates\nthe markdown pages beforehand. Simply use \npydocmd build\n to build the\ndocumentation, or \npydocmd serve\n to serve the documentation on a local HTTP\nserver. The \npydocmd gh-deploy\n from MkDocs is also supported.\n\n\nA configuration file \npydocmd.yml\n is required to use pydocmd in this mode.\nBelow is an example configuration. To get started, create \ndocs/\n directory\nand a file \npydocmd.yml\n inside of it. Copy the configuration below and\nadjust it to your needs, then run \npydocmd build\n from the \ndocs/\n directory.\n\n\nsite_name: \"My Documentation\"\n\n# This tells pydocmd which pages to generate from which Python modules,\n# functions and classes. At the first level is the page name, below that\n# is a tree of Python member names (modules, classes, etc.) that should be\n# documented. Higher indentation leads to smaller header size.\ngenerate:\n- baz/cool-stuff.md:\n  - foobar.baz:\n    - foobar.baz.CoolClass+     # (+ to include members)\n    - foobar.baz.some_function\n- baz/more-stuff.md:\n  - foobar.more++               # (++ to include members, and their members)\n\n# MkDocs pages configuration. The `<<` operator is sugar added by pydocmd\n# that allows you to use an external Markdown file (eg. your project's README)\n# in the documentation. The path must be relative to current working directory.\npages:\n- Home: index.md << ../README.md\n- foobar.baz:\n  - Cool Stuff: baz/cool-stuff.md\n\n# These options all show off their default values. You don't have to add\n# them to your configuration if you're fine with the default.\ndocs_dir: sources\ngens_dir: _build/pydocmd     # This will end up as the MkDocs 'docs_dir'\nsite_dir: _build/site\ntheme:    readthedocs\nloader:   pydocmd.loader.PythonLoader\npreprocessor: pydocmd.preprocessor.Preprocessor\n\n# Additional search path for your Python module. If you use Pydocmd from a\n# subdirectory of your project (eg. docs/), you may want to add the parent\n# directory here.\nadditional_search_paths:\n- ..\n\n\n\n\nSyntax\n\n\nCross-references\n\n\nSymbols in the same namespace may be referenced by using a hash-symbol (\n#\n)\ndirectly followed by the symbols' name, including relative references. Note that\nusing parentheses for function names is encouraged and will be ignored and\nautomatically added when converting docstrings. Examples: \n#ClassName.member\n or\n\n#mod.function()\n.\n\n\nFor absolute references for modules or members in names that are not available\nin the current global namespace, \n#::mod.member\n must be used (note the two\npreceeding two double-colons).\n\n\nFor long reference names where only some part of the name should be displayed,\nthe syntax \n#X~some.reference.name\n can be used, where \nX\n is the number of\nelements to keep. If \nX\n is omitted, it will be assumed 1. Example:\n\n#~some.reference.name\n results in only \nname\n being displayed.\n\n\nIn order to append additional characters that are not included in the actual\nreference name, another hash-symbol can be used, like \n#Signal#s\n.\n\n\npydoc-markdown\n can be extended to find other cross-references using the\n\nExtension API\n.\n\n\nSections\n\n\nSections can be generated with the Markdown \n# <Title>\n syntax. It is important\nto add a whitespace after the hash-symbol (\n#\n), as otherwise it would represent\na cross-reference. Some special sections alter the rendered result of their\ncontent, including\n\n\n\n\nArguments (1)\n\n\nParameters (1)\n\n\nAttributes (1)\n\n\nMembers (1)\n\n\nRaises (2)\n\n\nReturns (2)\n\n\n\n\n(1): Lines beginning with \n<ident> [(<type>[, ...])]:\n are treated as\nargument/parameter or attribute/member declarations. Types listed inside the\nparenthesis (optional) are cross-linked, if possible. For attribute/member\ndeclarations, the identifier is typed in a monospace font.\n\n\n(2): Lines beginning with \n<type>[, ...]:\n are treated as raise/return type\ndeclarations and the type names are cross-linked, if possible.\n\n\nLines following a name's description are considered part of the most recent\ndocumentation unless separated by another declaration or an empty line. \n<type>\n\nplaceholders can also be tuples in the form \n(<type>[, ...])\n.\n\n\nCode Blocks\n\n\nGitHub-style Markdown code-blocks with language annotations can be used.\n\n\n```python\n>>> for i in range(100):\n...\n```\n\n\n\n\n\nChanges\n\n\nv2.0.1\n\n\n\n\nSupport \nadditional_search_path\n key in configuration\n\n\nRender headers as HTML \n<hX>\n tags rather than Markdown tags, so we\n  assign a proper ID to them\n\n\nFix #21 -- AttributeError: 'module' object has no attribute 'signature'\n\n\nNow requires the \nsix\n module\n\n\nFIx #22 -- No blank space after header does not render codeblocks\n\n\n\n\nv2.0.0\n\n\n\n\nComplete overhaul of \npydoc-markdown\n employing MkDocs and the Markdown module.\n\n\n\n\n\n\nCopyright \u00a9 2017  Niklas Rosenstein",
            "title": "Home"
        },
        {
            "location": "/#pydocmd",
            "text": "\u2013  insipired by the  Keras  Documentation  Pydocmd uses  MkDocs  and extended  Markdown  syntax to generate beautiful\nPython API documentation.  Todo   [x] Support  +  suffix to include documented members of a module/class  [ ] Expand and link cross-references (eg.  #SomeClass )  [ ] Parse, format and link types listed in parameter/member/raise/return type\n      docstrings (eg.  someattr (int): This is... )",
            "title": "pydocmd"
        },
        {
            "location": "/#installation",
            "text": "pip install pydoc-markdown\npip install git+https://github.com/NiklasRosenstein/pydoc-markdown.git  # latest development version",
            "title": "Installation"
        },
        {
            "location": "/#usage",
            "text": "Pydocmd can generate plain Markdown files from Python modules using the pydocmd simple  command. Specify one or more module names on the command-line.\nSupports the  +  syntax to include members of the module (or  ++  to include\nmembers of the members, etc.)  pydocmd simple mypackage+ mypackage.mymodule+ > docs.md  Alternatively, pydocmd wraps the MkDocs command-line interface and generates\nthe markdown pages beforehand. Simply use  pydocmd build  to build the\ndocumentation, or  pydocmd serve  to serve the documentation on a local HTTP\nserver. The  pydocmd gh-deploy  from MkDocs is also supported.  A configuration file  pydocmd.yml  is required to use pydocmd in this mode.\nBelow is an example configuration. To get started, create  docs/  directory\nand a file  pydocmd.yml  inside of it. Copy the configuration below and\nadjust it to your needs, then run  pydocmd build  from the  docs/  directory.  site_name: \"My Documentation\"\n\n# This tells pydocmd which pages to generate from which Python modules,\n# functions and classes. At the first level is the page name, below that\n# is a tree of Python member names (modules, classes, etc.) that should be\n# documented. Higher indentation leads to smaller header size.\ngenerate:\n- baz/cool-stuff.md:\n  - foobar.baz:\n    - foobar.baz.CoolClass+     # (+ to include members)\n    - foobar.baz.some_function\n- baz/more-stuff.md:\n  - foobar.more++               # (++ to include members, and their members)\n\n# MkDocs pages configuration. The `<<` operator is sugar added by pydocmd\n# that allows you to use an external Markdown file (eg. your project's README)\n# in the documentation. The path must be relative to current working directory.\npages:\n- Home: index.md << ../README.md\n- foobar.baz:\n  - Cool Stuff: baz/cool-stuff.md\n\n# These options all show off their default values. You don't have to add\n# them to your configuration if you're fine with the default.\ndocs_dir: sources\ngens_dir: _build/pydocmd     # This will end up as the MkDocs 'docs_dir'\nsite_dir: _build/site\ntheme:    readthedocs\nloader:   pydocmd.loader.PythonLoader\npreprocessor: pydocmd.preprocessor.Preprocessor\n\n# Additional search path for your Python module. If you use Pydocmd from a\n# subdirectory of your project (eg. docs/), you may want to add the parent\n# directory here.\nadditional_search_paths:\n- ..",
            "title": "Usage"
        },
        {
            "location": "/#syntax",
            "text": "",
            "title": "Syntax"
        },
        {
            "location": "/#cross-references",
            "text": "Symbols in the same namespace may be referenced by using a hash-symbol ( # )\ndirectly followed by the symbols' name, including relative references. Note that\nusing parentheses for function names is encouraged and will be ignored and\nautomatically added when converting docstrings. Examples:  #ClassName.member  or #mod.function() .  For absolute references for modules or members in names that are not available\nin the current global namespace,  #::mod.member  must be used (note the two\npreceeding two double-colons).  For long reference names where only some part of the name should be displayed,\nthe syntax  #X~some.reference.name  can be used, where  X  is the number of\nelements to keep. If  X  is omitted, it will be assumed 1. Example: #~some.reference.name  results in only  name  being displayed.  In order to append additional characters that are not included in the actual\nreference name, another hash-symbol can be used, like  #Signal#s .  pydoc-markdown  can be extended to find other cross-references using the Extension API .",
            "title": "Cross-references"
        },
        {
            "location": "/#sections",
            "text": "Sections can be generated with the Markdown  # <Title>  syntax. It is important\nto add a whitespace after the hash-symbol ( # ), as otherwise it would represent\na cross-reference. Some special sections alter the rendered result of their\ncontent, including   Arguments (1)  Parameters (1)  Attributes (1)  Members (1)  Raises (2)  Returns (2)   (1): Lines beginning with  <ident> [(<type>[, ...])]:  are treated as\nargument/parameter or attribute/member declarations. Types listed inside the\nparenthesis (optional) are cross-linked, if possible. For attribute/member\ndeclarations, the identifier is typed in a monospace font.  (2): Lines beginning with  <type>[, ...]:  are treated as raise/return type\ndeclarations and the type names are cross-linked, if possible.  Lines following a name's description are considered part of the most recent\ndocumentation unless separated by another declaration or an empty line.  <type> \nplaceholders can also be tuples in the form  (<type>[, ...]) .",
            "title": "Sections"
        },
        {
            "location": "/#code-blocks",
            "text": "GitHub-style Markdown code-blocks with language annotations can be used.  ```python\n>>> for i in range(100):\n...\n```",
            "title": "Code Blocks"
        },
        {
            "location": "/#changes",
            "text": "",
            "title": "Changes"
        },
        {
            "location": "/#v201",
            "text": "Support  additional_search_path  key in configuration  Render headers as HTML  <hX>  tags rather than Markdown tags, so we\n  assign a proper ID to them  Fix #21 -- AttributeError: 'module' object has no attribute 'signature'  Now requires the  six  module  FIx #22 -- No blank space after header does not render codeblocks",
            "title": "v2.0.1"
        },
        {
            "location": "/#v200",
            "text": "Complete overhaul of  pydoc-markdown  employing MkDocs and the Markdown module.    Copyright \u00a9 2017  Niklas Rosenstein",
            "title": "v2.0.0"
        },
        {
            "location": "/document/",
            "text": "pydocmd.document\n\n\n\nThis module implements the structural representation of an API documentation\nin separate documents and symbolic names. The final documentation is rendered\nfrom this structured representation.\n\n\nSection\n\n\n\nSection(self, doc, identifier=None, title=None, depth=1, content=None)\n\n\n\n\nA section represents a part of a \nDocument\n. It contains Markdown-formatted\ncontent that will be rendered into a file at some point.\n\n\nAttributes\n\n\n\n\ndoc (Document)\n: The document that the section belongs to.\n\n\nidentifier (str, None)\n: The globally unique identifier of the section. This\n  identifier usually matches the name of the element that the section\n  describes (eg. a class or function) and will be used for cross-referencing.\n\n\ntitle (str, None)\n: The title of the section. If specified, it will be\n  rendered before \nsection.content\n and the header-size will depend on\n  the \nsection.depth\n.\n\n\ndepth (int)\n: The depth of the section, defaults to 1. Currently only affects\n  the header-size that is rendered for the \nsection.title\n.\n\n\ncontent (str)\n: The Markdown-formatted content of the section.\n\n\n\n\nrender\n\n\n\nSection.render(self, stream)\n\n\n\n\nRender the section into \nstream\n.\n\n\nindex\n\n\n\nReturns the \nIndex\n that this section is associated with, accessed via\n\nsection.document\n.\n\n\nDocument\n\n\n\nDocument(self, index, url)\n\n\n\n\nRepresents a single document that may contain several \nSection``s\n. Every\ndocument \nmust\n have a relative URL associated with it.\n\n\nAttributes\n\n\n\n\nindex (Index)\n: The index that the document belongs to.\n\n\nurl (str)\n: The relative URL of the document.\n\n\n\n\nIndex\n\n\n\nIndex(self)\n\n\n\n\nThe index manages all documents and sections globally. It keeps track of\nthe symbolic names allocated for the sections to be able to link to them\nfrom other sections.\n\n\nAttributes\n\n\n\n\ndocuments (dict)\n:\n\n\nsections (dict)\n:\n\n\n\n\nnew_document\n\n\n\nIndex.new_document(self, filename, url=None)\n\n\n\n\nCreate a new document.\n\n\nArguments\n\n\n\n\nfilename (str)\n: The filename of the document. Must end with \n.md\n.\n\n\nurl (str)\n: The relative URL of the document. If omitted, will be\n  automatically deduced from \nfilename\n (same without the \n.md\n suffix).\n\n\n\n\nRaises\n\n\n\n\nValueError\n: If \nfilename\n does not end with \n.md\n.\n\n\nValueError\n: If \nfilename\n is not a relative path.\n\n\nValueError\n: If a document with the specified \nfilename\n already exists.\n\n\n\n\nnew_section\n\n\n\nIndex.new_section(self, doc, *args, **kwargs)\n\n\n\n\nCreate a new section in the specified document. The arguments for this\nmethod match the parameters for the \nSection\n constructor.\n\n\nRaises\n\n\n\n\nValueError\n: If the section identifier is already used.",
            "title": "Document"
        },
        {
            "location": "/imp/",
            "text": "pydocmd.imp\n\n\n\nThis module provides utilities for importing Python objects by name.\n\n\nimport_module\n\n\n\nimport_module(name)\n\n\n\n\nImports a Python module assuming that the whole \nname\n identifies only a\nPython module and no symbol inside a Python module.\n\n\nimport_object\n\n\n\nimport_object(name)\n\n\n\n\nLike \nimport_object_with_scope()\n but returns only the object.\n\n\nimport_object_with_scope\n\n\n\nimport_object_with_scope(name)\n\n\n\n\nImports a Python object by an absolute identifier.\n\n\nArguments\n\n\n\n\nname (str)\n: The name of the Python object to import.\n\n\n\n\nReturns\n\n\n(any, Module)\n: The object and the module that contains it. Note that\n  for plain modules loaded with this function, both elements of the\n  tuple may be the same object.",
            "title": "Import Utils"
        },
        {
            "location": "/extensions/loader/",
            "text": "pydocmd.loader\n\n\n\nThis module provides implementations to load documentation information from\nan identifier as it is specified in the \npydocmd.yml:generate\n configuration\nkey. A loader basically takes care of loading the documentation content for\nthat name, but is not supposed to apply preprocessing.\n\n\nPythonLoader\n\n\n\nPythonLoader(self, config)\n\n\n\n\nExpects absolute identifiers to import with \nimport_object_with_scope()\n.\n\n\nload_section\n\n\n\nPythonLoader.load_section(self, section)\n\n\n\n\nLoads the contents of a \nSection\n. The \nsection.identifier\n is the name\nof the object that we need to load.\n\n\nArguments\n\n\n\n\nsection (Section)\n: The section to load. Fill the \nsection.title\n and\n    \nsection.content\n values. Optionally, \nsection.loader_context\n can\n    be filled with custom arbitrary data to reference at a later point.",
            "title": "Loader"
        },
        {
            "location": "/extensions/preprocessor/",
            "text": "pydocmd.preprocessor\n\n\n\nThis module implements preprocessing Markdown-like docstrings and converts\nit to fully markdown compatible markup.\n\n\nPreprocessor\n\n\n\nPreprocessor(self, config)\n\n\n\n\nThis class implements the basic preprocessing.\n\n\npreprocess_section\n\n\n\nPreprocessor.preprocess_section(self, section)\n\n\n\n\nPreprocess the contents of \nsection\n.",
            "title": "Preprocessor"
        }
    ]
}
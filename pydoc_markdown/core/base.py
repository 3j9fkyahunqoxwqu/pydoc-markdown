# The MIT License (MIT)
#
# Copyright (c) 2018 Niklas Rosenstein
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to
# deal in the Software without restriction, including without limitation the
# rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
# sell copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
# IN THE SOFTWARE.


from __future__ import print_function
import abc
import six


class Configurable(object):

  config = None


@six.add_metaclass(abc.ABCMeta)
class Loader(Configurable):
  """
  The #Loader interface is responsible for loading documents from a
  module spec. A module spec is any identifier followed by zero or more
  `+` characters, indicating the additional child levels of the module to
  take into account.
  """

  @abc.abstractmethod
  def load_document(self, modspec):
    raise NotImplementedError


@six.add_metaclass(abc.ABCMeta)
class Preprocessor(Configurable):
  """
  The #Preprocessor interface is responsible for preprocessing the plain-text
  content of documents and/or sections. It is also responsible for converting
  any references to other sections. A special link markup must be used to
  be recognized by the #Indexer interface:

      {[< text >][< section_id >]}

  Use the #Section.gen_link_markup() method or #gen_link_markup() method.
  """

  @abc.abstractmethod
  def process_document(self, index, document):
    raise NotImplementedError

  @abc.abstractmethod
  def process_document(self, index, section):
    raise NotImplementedError


@six.add_metaclass(abc.ABCMeta)
class Indexer(Configurable):
  """
  The #Indexer is responsible for rendering additional content into documents
  or writing additional output files based on the document index. It is also
  responsible for converting link markup into actual hyperlinks to other
  sections in other documents.

  The link markup is generated by the #Preprocessor.
  """

  @abc.abstractmethod
  def process_index(self, index):
    raise NotImplementedError

  @abc.abstractmethod
  def process_document(self, index, document):
    raise NotImplementedError

  @abc.abstractmethod
  def write_additional_files(self, index):
    raise NotImplementedError


class VoidIndexer(Indexer):

  def process_index(self, index):
    pass

  def process_document(self, index, document):
    pass

  def write_additional_files(self, index):
    pass


class Renderer(Configurable):
  """
  The renderer is ultimately responsible for rendering documents to a file.
  """

  def render_document(self, fp, document):
    for section in document.sections:
      self.render_section(fp, section)

  def render_section(self, fp, section):
    print(
      '<h{depth} id="{id}">{title}</h{depth}>\n'.format(
        depth=section.depth,
        id=section.id,
        title=section.title
      ),
      file=fp
    )
    print(section.content, file=fp)


def gen_link_markup(text, section_id):
  return '{[< {} >][< {} >]}'.format(section_id)
